/**
 * @file Gaussian2DFilter.h
 *
 * @brief Implements a Gaussian 2D filter for image blurring.
 *
 * The Gaussian2DFilter class encapsulates the functionality required to apply a Gaussian blur to 2D images.
 * This process involves creating a Gaussian kernel based on the specified sigma and kernel size, and applying
 * this kernel to an image with the chosen padding type. Gaussian blurring is widely used in image processing
 * for noise reduction, detail smoothing, and preparing images for higher-level processing tasks. The design
 * allows for easy adjustment of blur intensity and compatibility with various image padding strategies.
 * Created as part of the Advanced Programming Group's project initiatives, this tool aids in sophisticated
 * image manipulation and enhancement techniques.
 *
 * @date Created on March 21, 2024
 *
 * @authors
 * Advanced Programming Group Radix Sort:
 *   - Benjamin Duncan (edsml-bd1023)
 *   - Boyang Hu (edsml-bh223)
 *   - Chawk Chamoun (edsml-cc8915)
 *   - Mingsheng Cai (acse-sc4623)
 *   - Moyu Zhang (acse-mz223)
 *   - Ryan Benney (acse-rgb123)
 */

#pragma once

#ifndef ADVANCED_PROGRAMMING_GROUP_RADIX_SORT_GAUSSIAN2DFILTER_H
#define ADVANCED_PROGRAMMING_GROUP_RADIX_SORT_GAUSSIAN2DFILTER_H

#include "Image.h"
#include "Padding.h"

#include <vector>

class Gaussian2DFilter {
private:
    std::vector <std::vector<double>> kernel; // Gaussian kernel
    double sigma; // standard deviation
    int kernelSize; // size of the kernel
    PaddingType paddingType; // padding type

    /**
     * Generates the Gaussian kernel based on the specified sigma and kernel size.
     *
     * This method constructs the Gaussian kernel used for blurring the image. It calculates the value of each element in the
     * kernel matrix based on the Gaussian function, ensuring the kernel is normalized so that its sum equals 1. This normalization
     * is crucial for maintaining the original image's brightness level after the application of the blur. The kernel is stored
     * internally within the Gaussian2DFilter object and used in the `apply` method to blur images.
     */
    void generateKernel();

public:
    /**
     * Constructor for the Gaussian2DFilter class.
     *
     * Initializes a Gaussian2DFilter object with specified parameters for the Gaussian blur. The kernel size affects the
     * blur extent by determining the size of the area around each pixel to consider in the blur calculation. The sigma value
     * controls the spread of the blur. An odd kernel size ensures a symmetric area around each pixel. The constructor
     * validates the kernel size to ensure it is odd, throwing an exception if it is not. This setup enables precise control
     * over the blur effect applied to images.
     *
     * @param kernelSize: The size of the kernel for the Gaussian blur, which must be an odd number.
     * @param sigma: The standard deviation of the Gaussian distribution, determining the blur's spread.
     * @param paddingType: The type of padding to use when processing edges of the image.
     * @throws std::invalid_argument if kernelSize is not an odd number.
     */
    Gaussian2DFilter(int kernelSize, double sigma = 1.0, PaddingType paddingType = PaddingType::ZeroPadding);

    /**
     * Returns the Gaussian kernel used for blurring images.
     *
     * This method provides access to the Gaussian kernel generated by the Gaussian2DFilter object. The kernel is a 2D matrix
     * of double values representing the weights used in the convolution operation to apply the Gaussian blur. The kernel is
     * normalized to ensure that the sum of its elements equals 1, preserving the image's brightness level during the blur.
     *
     * @return A 2D vector of double values representing the Gaussian kernel.
     */
    std::vector<std::vector<double>> getKernel() const;

    /**
     * Applies the Gaussian blur to an image using the generated Gaussian kernel.
     *
     * This method blurs the provided Image object by convolving it with the Gaussian kernel generated by `generateKernel`.
     * It applies the blur separately to each channel of the image, accommodating images with multiple color channels. The
     * method handles edge pixels according to the specified padding type, ensuring the blur extends to the edges of the image
     * without artifacts. The blurred image replaces the original image data, resulting in a smoothly blurred version of the
     * original image.
     *
     * @param image: A reference to an Image object representing the image to be blurred. The Image object must be initialized
     * and loaded with data prior to calling this method.
     */
    void apply(Image &image) const;
};

#endif //ADVANCED_PROGRAMMING_GROUP_RADIX_SORT_GAUSSIAN2DFILTER_H
